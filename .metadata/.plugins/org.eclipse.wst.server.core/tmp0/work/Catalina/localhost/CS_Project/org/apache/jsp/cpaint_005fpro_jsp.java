/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.5
 * Generated at: 2018-07-02 10:45:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class cpaint_005fpro_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\r\n");
      out.write("<script src=\"//code.jquery.com/jquery.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write(".where {\r\n");
      out.write("\tdisplay: block;\r\n");
      out.write("\tmargin: 25px 15px;\r\n");
      out.write("\tfont-size: 8px;\r\n");
      out.write("\tcolor: #000;\r\n");
      out.write("\ttext-decoration: none;\r\n");
      out.write("\tfont-family: verdana;\r\n");
      out.write("\tfont-style: italic;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".textbox {\r\n");
      out.write("\tposition: relative;\r\n");
      out.write("\twidth: 400px;\r\n");
      out.write("\tmargin: 20px\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".textbox label {\r\n");
      out.write("\tposition: absolute;\r\n");
      out.write("\ttop: 1px; /* input 요소의 border-top 설정값 만큼 */\r\n");
      out.write("\tleft: 1px; /* input 요소의 border-left 설정값 만큼 */\r\n");
      out.write("\tpadding: .8em .5em; /* input 요소의 padding 값 만큼 */\r\n");
      out.write("\tcolor: #999;\r\n");
      out.write("\tcursor: text;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".textbox input[type=\"number\"], .textbox input[type=\"number\"] {\r\n");
      out.write("\twidth: 100%; /* 원하는 너비 설정 */\r\n");
      out.write("\theight: auto; /* 높이값 초기화 */\r\n");
      out.write("\tline-height: normal; /* line-height 초기화 */\r\n");
      out.write("\tpadding: .8em .5em; /* 원하는 여백 설정, 상하단 여백으로 높이를 조절 */\r\n");
      out.write("\tborder: 1px solid #999;\r\n");
      out.write("\tborder-radius: 0; /* iSO 둥근모서리 제거 */\r\n");
      out.write("\toutline-style: none; /* 포커스시 발생하는 효과 제거를 원한다면 */\r\n");
      out.write("\t-webkit-appearance: none; /* 브라우저별 기본 스타일링 제거 */\r\n");
      out.write("\t-moz-appearance: none;\r\n");
      out.write("\tappearance: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\t.button{\r\n");
      out.write("\t\tbackground:#1AAB8A;\r\n");
      out.write("\t\tcolor: #fff;\r\n");
      out.write("\t\tborder: none;\r\n");
      out.write("\t\tposition:relative;\r\n");
      out.write("\t\theight: 40px;\r\n");
      out.write("\t\tfont-size: 13pt;\r\n");
      out.write("\t\tpadding: 0 2em;\r\n");
      out.write("\t\tcursor: pointer;\r\n");
      out.write("\t\ttransition: 800ms ease all;\r\n");
      out.write("\t\toutline: none;\r\n");
      out.write("\t\tmargin-top:3%;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t.button:hover{\r\n");
      out.write("  \t\tbackground:#fff;\r\n");
      out.write("  \t\tcolor:#1AAB8A;\r\n");
      out.write("  \t\tborder-bottom: 1px solid #1AAB8A;\r\n");
      out.write("  \t\tborder-top:1px solid #1AAB8A; \r\n");
      out.write("\t}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\t$(document)\r\n");
      out.write("\t\t\t.ready(\r\n");
      out.write("\t\t\t\t\tfunction() {\r\n");
      out.write("\t\t\t\t\t\tvar placeholderTarget = $('.textbox input[type=\"number\"], .textbox input[type=\"number\"]');\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t//포커스시\r\n");
      out.write("\t\t\t\t\t\tplaceholderTarget.on('focus', function() {\r\n");
      out.write("\t\t\t\t\t\t\t$(this).siblings('label').fadeOut('fast');\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t//포커스아웃시\r\n");
      out.write("\t\t\t\t\t\tplaceholderTarget.on('focusout', function() {\r\n");
      out.write("\t\t\t\t\t\t\tif ($(this).val() == '') {\r\n");
      out.write("\t\t\t\t\t\t\t\t$(this).siblings('label').fadeIn('fast');\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script language=\"javascript\"> \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("//글자수 제한 체크 \r\n");
      out.write("\r\n");
      out.write("function len_chk(){  \r\n");
      out.write("\r\n");
      out.write("  var frm = document.insertFrm.p_num; \r\n");
      out.write("  var frm2 = document.insertFrm.bun_num;\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("  if(frm.value > 40 || frm.value < 20){  \r\n");
      out.write("\r\n");
      out.write("       alert(\"인원수는 20명 이상 40명 이하입니다!\");  \r\n");
      out.write("\r\n");
      out.write("       frm.focus();  \r\n");
      out.write("\r\n");
      out.write("  } else if(frm.value == \"\"){\r\n");
      out.write("\t  alert(\"인원수를 입력해주세요!\");\r\n");
      out.write("\t  frm.focus(); \r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  if(frm2.value > 4 || frm2.value < 0){\r\n");
      out.write("\t  alert(\"분단 수는 1분단 이상 4분단 이하입니다!\")\r\n");
      out.write("\t  frm2.focus(); \r\n");
      out.write("  }else if(frm2.value == \"\"){\r\n");
      out.write("\t  alert(\"분단 수를 입력해주세요!\");\r\n");
      out.write("\t  frm2.focus(); \r\n");
      out.write("\t  \r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("} \r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("UTF-8");
	String id = request.getParameter("id");

      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\t<div style=\"font-family: NANUMBARUNGOTHICLIGHT;\">\r\n");
      out.write("\t\t<center>\r\n");
      out.write("\t\t\t<h1>\r\n");
      out.write("\t\t\t\t<div style=\"margin-top: 50px; margin-bottom: 10%\">\r\n");
      out.write("\t\t\t\t\t<label style=\"color: #1AAB8A;\">자리</label>를 <label\r\n");
      out.write("\t\t\t\t\t\tstyle=\"color: #1AAB8A;\">바꿔</label>보자!\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</h1>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<!-- 인원수 20 ~ 40 \r\n");
      out.write("\t\t\t분단 2 ~ 4(1분단당 2명씩)\r\n");
      out.write("\t\t\t결번 자리(자퇴, 전학, 전학 후 입학 등)\r\n");
      out.write("\t\t\t인원수대로 자리 나타나게 하기\r\n");
      out.write("\t\t\t고정자리 정하기-->\r\n");
      out.write("\t\t\t<form name=\"insertFrm\"> \r\n");
      out.write("\t\t\t인원 수를 입력해주세요! (20 ~ 40)\r\n");
      out.write("\t\t\t <div class=\"textbox\">\r\n");
      out.write("\t\t\t\t<label for=\"ex_input\">인원 수 입력</label> <input type=\"number\"\r\n");
      out.write("\t\t\t\t\tname = \"p_num\" id=\"p_num\" max=\"40\" min=\"20\">\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t분단 수를 입력해주세요! (2 ~ 4)\r\n");
      out.write("\t\t\t<div class=\"textbox\">\r\n");
      out.write("\t\t\t\t<label for=\"ex_input2\">분단 수 입력</label> <input type=\"number\" max=\"4\"\r\n");
      out.write("\t\t\t\t\tmin=\"2\" name = \"bun_num\" id=\"bun_num\">\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<button id=\"btnPrev\" class=\"button\" onclick=\"len_chk()\">시작하기</button>\r\n");
      out.write("\t\t\t</from>\r\n");
      out.write("\t\t</center>\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
